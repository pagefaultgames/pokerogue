name: Code Quality

on:
  push:
    branches:
      - main
      - beta
      - release
      - "hotfix*"
  pull_request:
    branches:
      - main
      - beta
      - release
      - "hotfix*"
  merge_group:
    types: [checks_requested]
  workflow_dispatch:

jobs:
  run-linters:
    name: Run all linters
    timeout-minutes: 10
    runs-on: ubuntu-latest

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "pnpm"

      - name: Install Node modules
        run: pnpm i

      # Lint files with Biome-Lint - https://biomejs.dev/linter/
      - name: Lint with Biome
        run: pnpm biome-ci
        if: always()

      # Validate dependencies with dependency-cruiser - https://github.com/sverweij/dependency-cruiser
      - name: Run Dependency Cruiser
        run: pnpm depcruise
        if: always()

      # Validate types with tsc - https://www.typescriptlang.org/docs/handbook/compiler-options.html#using-the-cli
      - name: Run Typecheck
        run: pnpm typecheck
        id: typecheck
        if: always()

      # Run tsc again on the scripts folder.
      # Required in order to use separate rules for script js files and regular ts files
      - name: Run Typecheck (scripts)
        run: pnpm typecheck:scripts
        id: typecheck-scripts
        if: always()

      # NOTE: These steps *must* be ran last for the moment due to deleting files in `assets/`
      # Some asset files do not yet have full licensing information, and thus must be removed 
      # before checking for REUSE compliance
      - name: Prepare for REUSE compliance
        run: rm -rf assets/* LICENSES/LicenseRef-*
        if: always()

      - name: Check for REUSE compliance
        id: reuse-lint
        uses: fsfe/reuse-action@v5
        if: always()

      - name: Evaluate for Errors
        env:
          BIOME_LINT_OUTCOME: ${{ steps.biome_lint.outcome }}
          DEPCRUISE_OUTCOME: ${{ steps.depcruise.outcome }}
          TYPECHECK_OUTCOME: ${{ steps.typecheck.outcome }}
          TYPECHECK_SCRIPTS_OUTCOME: ${{ steps.typecheck-scripts.outcome }}
          REUSE_OUTCOME: ${{ steps.reuse-lint.outcome }}
        run: |
          # Check for Errors

          # Make text red.
          red () {
            printf "\e[31m%s\e[0m" "$1"
          }

          # Make text green.
          green () {
            printf "\e[32m%s\e[0m" "$1"
          }

          print_result() {
            local name=$1
            local outcome=$2
            if [ "$outcome" == "success" ]; then
              printf "$(green "✅ $name: $outcome")\n"
            else
              printf "$(red "❌ $name: $outcome")\n"
            fi
          }

          print_result "Biome" "$BIOME_LINT_OUTCOME"
          print_result "Depcruise" "$DEPCRUISE_OUTCOME"
          print_result "Typecheck" "$TYPECHECK_OUTCOME"
          print_result "Typecheck scripts" "$TYPECHECK_SCRIPTS_OUTCOME"
          print_result "Reuse Compliance" "$REUSE_OUTCOME"

          if [[ "$BIOME_LINT_OUTCOME" != "success" || \
            "$DEPCRUISE_OUTCOME" != "success" || \
            "$TYPECHECK_OUTCOME" != "success" || \
            "$TYPECHECK_SCRIPTS_OUTCOME" != "success" || \
            "$REUSE_OUTCOME" != "success" ]]; then
            printf "$(red "❌ One or more checks failed!")\n" >&2
            exit 1
          fi

          printf "$(green "✅ All checks passed!")\n"
        if: always()
