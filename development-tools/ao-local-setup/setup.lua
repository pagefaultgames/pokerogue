-- Environment Setup Scripts for AO Development Workflow
-- Initializes local development environment with proper configuration

local Setup = {}

-- Configuration for development environment
local CONFIG = {
    aoEmulatorPath = "development-tools/ao-local-setup/ao-emulator.lua",
    messageProcessorPath = "development-tools/ao-local-setup/message-processor.lua",
    processMainPath = "ao-processes/main.lua",
    testOutputDir = "development-tools/ao-local-setup/test-output",
    defaultProcessId = "dev-process",
    defaultOwner = "dev-owner"
}

function Setup.initializeEnvironment(options)
    options = options or {}
    
    print("üöÄ Initializing AO Development Environment")
    print("=========================================")
    
    -- Load required modules
    local AOEmulator = require(CONFIG.aoEmulatorPath).AOEmulator
    local MessageProcessor = require(CONFIG.messageProcessorPath)
    
    -- Create emulator instance
    local emulatorOptions = {
        processId = options.processId or CONFIG.defaultProcessId,
        owner = options.owner or CONFIG.defaultOwner
    }
    
    local emulator = AOEmulator.new(emulatorOptions)
    print("‚úÖ AO Emulator initialized with process ID: " .. emulator.processId)
    
    -- Create message processor
    local processor = MessageProcessor.new(emulator)
    print("‚úÖ Message Processor initialized")
    
    -- Load main process if available
    if Setup.fileExists(CONFIG.processMainPath) then
        local success, err = pcall(function()
            emulator:loadProcess(CONFIG.processMainPath)
        end)
        
        if success then
            print("‚úÖ Main process loaded successfully")
        else
            print("‚ö†Ô∏è  Warning: Failed to load main process: " .. tostring(err))
        end
    else
        print("‚ö†Ô∏è  Warning: Main process file not found at " .. CONFIG.processMainPath)
    end
    
    -- Create test output directory
    Setup.ensureDirectory(CONFIG.testOutputDir)
    print("‚úÖ Test output directory ready: " .. CONFIG.testOutputDir)
    
    print("")
    print("üéâ Development environment ready!")
    print("   Process ID: " .. emulator.processId)
    print("   Owner: " .. emulator.owner)
    print("")
    
    return {
        emulator = emulator,
        processor = processor,
        config = CONFIG
    }
end

function Setup.validateEnvironment()
    print("üîç Validating AO Development Environment")
    print("=======================================")
    
    local issues = {}
    
    -- Check required files
    local requiredFiles = {
        CONFIG.aoEmulatorPath,
        CONFIG.messageProcessorPath
    }
    
    for _, file in ipairs(requiredFiles) do
        if not Setup.fileExists(file) then
            table.insert(issues, "Missing required file: " .. file)
        else
            print("‚úÖ Found: " .. file)
        end
    end
    
    -- Check optional files
    local optionalFiles = {
        CONFIG.processMainPath
    }
    
    for _, file in ipairs(optionalFiles) do
        if Setup.fileExists(file) then
            print("‚úÖ Found: " .. file)
        else
            print("‚ö†Ô∏è  Optional file not found: " .. file)
        end
    end
    
    -- Validate Lua environment
    local luaVersion = _VERSION
    print("‚úÖ Lua version: " .. luaVersion)
    
    if string.find(luaVersion, "5.3") then
        print("‚úÖ Lua 5.3 detected - AO compatible")
    else
        table.insert(issues, "Lua 5.3 required for AO compatibility, found: " .. luaVersion)
    end
    
    -- Test basic functionality
    local success, err = pcall(function()
        local AOEmulator = require(CONFIG.aoEmulatorPath).AOEmulator
        local emulator = AOEmulator.new({processId = "test", owner = "test"})
        return emulator
    end)
    
    if success then
        print("‚úÖ AO Emulator instantiation test passed")
    else
        table.insert(issues, "AO Emulator test failed: " .. tostring(err))
    end
    
    -- Summary
    print("")
    if #issues == 0 then
        print("üéâ Environment validation passed!")
        return true, {}
    else
        print("‚ùå Environment validation failed with " .. #issues .. " issues:")
        for _, issue in ipairs(issues) do
            print("   - " .. issue)
        end
        return false, issues
    end
end

function Setup.createTestProcess(processConfig)
    processConfig = processConfig or {}
    
    local processTemplate = string.format([[
-- Test AO Process Generated by Setup
-- Process ID: %s
-- Owner: %s

local json = require("json")

-- Global state for test process
State = State or {}

-- Test handler
Handlers.add("Test", "Test", function(message)
    print("Test handler received message from: " .. message.From)
    
    State.lastMessage = {
        from = message.From,
        action = message.Action,
        data = message.Data,
        timestamp = os.time()
    }
    
    return {
        success = true,
        message = "Test handler executed successfully"
    }
end)

-- State query handler
Handlers.add("Query", "Query", function(message)
    return {
        success = true,
        state = State,
        processId = ao.id
    }
end)

print("Test process loaded with " .. #Handlers.list .. " handlers")
]], processConfig.processId or "test-process", processConfig.owner or "test-owner")

    -- Write test process
    local testProcessPath = CONFIG.testOutputDir .. "/test-process.lua"
    Setup.writeFile(testProcessPath, processTemplate)
    
    print("‚úÖ Test process created: " .. testProcessPath)
    return testProcessPath
end

-- Utility functions
function Setup.fileExists(path)
    local file = io.open(path, "r")
    if file then
        file:close()
        return true
    end
    return false
end

function Setup.ensureDirectory(path)
    -- Simple directory creation (platform-specific implementation needed)
    os.execute("mkdir -p " .. path)
end

function Setup.writeFile(path, content)
    local file = io.open(path, "w")
    if file then
        file:write(content)
        file:close()
        return true
    end
    return false
end

function Setup.readFile(path)
    local file = io.open(path, "r")
    if file then
        local content = file:read("*a")
        file:close()
        return content
    end
    return nil
end

-- Quick start function for common development scenarios
function Setup.quickStart(scenario)
    scenario = scenario or "basic"
    
    print("üöÄ Quick Start: " .. scenario)
    print(string.rep("=", 20 + string.len(scenario)))
    
    local env = Setup.initializeEnvironment()
    
    if scenario == "basic" then
        -- Basic development scenario
        local testMessage = {
            From = "dev-wallet",
            Action = "Test",
            Data = "Hello AO Development Environment"
        }
        
        local result = env.processor:processMessage(testMessage)
        print("üì® Test message sent:")
        print("   Action: " .. testMessage.Action)
        print("   From: " .. testMessage.From)
        print("   Results: " .. #result.results .. " handler responses")
        
    elseif scenario == "testing" then
        -- Testing scenario setup
        local testProcessPath = Setup.createTestProcess({
            processId = "testing-process",
            owner = "testing-owner"
        })
        
        env.emulator:loadProcess(testProcessPath)
        print("üß™ Testing environment configured")
        
    end
    
    return env
end

return Setup