#!/bin/bash
# Emergency Bundle Splitting Strategy
# Splits oversized bundles into core + data modules for immediate deployment

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

BUNDLE_DIR="${1:-build-optimized}"
EMERGENCY_DIR="build-emergency"
MAX_CORE_SIZE=400000  # 400KB for core logic (leaving room for runtime)

echo -e "${GREEN}🚨 Emergency Bundle Splitting${NC}"
echo "=============================="
echo ""

# Create emergency build directory
mkdir -p "$EMERGENCY_DIR"

split_bundle() {
    local bundle_path="$1"
    local bundle_name=$(basename "$bundle_path" .lua)
    
    echo -e "${YELLOW}🔧 Processing $bundle_name...${NC}"
    
    # Core process file (handlers + essential logic)
    local core_file="$EMERGENCY_DIR/${bundle_name}-core.lua"
    local data_file="$EMERGENCY_DIR/${bundle_name}-data.lua"
    
    echo "-- Emergency Core Bundle: $bundle_name" > "$core_file"
    echo "-- Generated by emergency-bundle-split.sh" >> "$core_file"
    echo "-- Contains: Handlers, core logic, RNG systems" >> "$core_file"
    echo "-- Bundle timestamp: $(date)" >> "$core_file"
    echo "" >> "$core_file"
    echo "local json = require('json')" >> "$core_file"
    echo "" >> "$core_file"
    
    echo "-- Emergency Data Bundle: $bundle_name" > "$data_file"
    echo "-- Generated by emergency-bundle-split.sh" >> "$data_file"
    echo "-- Contains: Static data tables, constants, enums" >> "$data_file"
    echo "-- Bundle timestamp: $(date)" >> "$data_file"
    echo "" >> "$data_file"
    echo "local json = require('json')" >> "$data_file"
    echo "" >> "$data_file"
    
    # Split logic: Core = handlers + logic, Data = constants + tables
    local in_data_section=false
    local current_module=""
    
    while IFS= read -r line; do
        # Detect module boundaries
        if [[ "$line" =~ ^--.*===.*MODULE:.*===$ ]]; then
            current_module=$(echo "$line" | sed 's/^.*MODULE: //' | sed 's/ =====$//g')
            
            # Determine if this is a data module
            if [[ "$current_module" =~ data\.(constants|species|moves|items) ]] || \
               [[ "$current_module" =~ (enums|type-chart|nature-modifiers|database) ]]; then
                in_data_section=true
                echo "$line" >> "$data_file"
            else
                in_data_section=false
                echo "$line" >> "$core_file"
            fi
        else
            # Route content to appropriate file
            if [[ $in_data_section == true ]]; then
                echo "$line" >> "$data_file"
            else
                echo "$line" >> "$core_file"
            fi
        fi
    done < "$bundle_path"
    
    # Add data loading mechanism to core
    echo "" >> "$core_file"
    echo "-- Emergency data loading (placeholder for external data)" >> "$core_file"
    echo "local function loadExternalData()" >> "$core_file"
    echo "    -- TODO: Load data from Arweave storage or separate process" >> "$core_file"
    echo "    print('Warning: Using emergency core-only mode - data externalized')" >> "$core_file"
    echo "    return {}" >> "$core_file"
    echo "end" >> "$core_file"
    echo "" >> "$core_file"
    echo "-- Initialize with external data loading" >> "$core_file"
    echo "ExternalData = loadExternalData()" >> "$core_file"
    
    local core_size=$(wc -c < "$core_file")
    local data_size=$(wc -c < "$data_file")
    local original_size=$(wc -c < "$bundle_path")
    
    echo "  Original size: $original_size bytes"
    echo "  Core size: $core_size bytes"
    echo "  Data size: $data_size bytes"
    
    if [[ $core_size -le $MAX_CORE_SIZE ]]; then
        echo -e "  ${GREEN}✅ Core bundle within deployment limits${NC}"
        return 0
    else
        echo -e "  ${YELLOW}⚠️  Core still large, but reduced by $((original_size - core_size)) bytes${NC}"
        return 1
    fi
}

echo -e "${BLUE}🔍 Scanning for oversized bundles...${NC}"

for bundle in "$BUNDLE_DIR"/*.lua; do
    if [[ -f "$bundle" ]]; then
        size=$(wc -c < "$bundle")
        if [[ $size -gt 512000 ]]; then  # 500KB limit
            echo -e "${RED}📦 Found oversized bundle: $(basename "$bundle") ($size bytes)${NC}"
            split_bundle "$bundle"
            echo ""
        fi
    fi
done

# Create deployment strategy
cat > "$EMERGENCY_DIR/emergency-deployment-strategy.md" << EOF
# Emergency Deployment Strategy

## Overview
Bundles have been split into core and data components for immediate deployment.

## Deployment Process
1. Deploy core bundles first (handlers + essential logic)
2. Validate core functionality 
3. Deploy data bundles or externalize to Arweave storage

## Core Bundle Contents
- Message handlers
- Core game logic (battle, Pokemon state)
- RNG systems
- Process coordination

## Data Bundle Contents (To Be Externalized)
- Static data tables (Pokemon species, moves, items)
- Constants and enums
- Type effectiveness charts
- Nature modifiers

## Next Steps
1. Test core bundles with minimal data
2. Implement external data loading from Arweave
3. Gradually migrate to full data set

## Risk Mitigation
- Core functionality preserved
- Data can be loaded dynamically
- Gradual migration path available
EOF

echo -e "${GREEN}🎉 Emergency Splitting Complete!${NC}"
echo ""
echo -e "${BLUE}📁 Emergency bundles created in: $EMERGENCY_DIR${NC}"
echo ""
echo -e "${YELLOW}⚠️  Important Notes:${NC}"
echo "1. Core bundles contain essential functionality only"
echo "2. Data has been externalized and needs separate deployment"
echo "3. This is an emergency measure - plan full optimization"
echo ""
echo -e "${BLUE}📋 Next Steps:${NC}"
echo "1. Validate emergency bundles: ./scripts/validate-bundle-sizes.sh $EMERGENCY_DIR"
echo "2. Deploy core bundles first"
echo "3. Implement external data loading mechanism"