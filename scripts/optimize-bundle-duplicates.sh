#!/bin/bash
# Bundle Deduplication Optimizer
# Fixes duplicate module inclusions by creating shared module pool

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

AO_DIR="ao-processes"
BUILD_DIR="build"
OPTIMIZED_DIR="build-optimized"

echo -e "${GREEN}üîß Bundle Deduplication Optimizer${NC}"
echo "===================================="
echo ""

# Create optimized build directory
mkdir -p "$OPTIMIZED_DIR"

# Enhanced bundler with deduplication
create_optimized_bundler() {
    cat > "scripts/optimized-lua-bundler.sh" << 'EOF'
#!/bin/bash
# Optimized Lua Bundler with Deduplication
set -e

# Colors for output
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Configuration
ENTRY_POINT=""
OUTPUT_FILE=""
WORKING_DIR=""
PROCESSED_MODULES=()
MODULE_POOL=()

show_help() {
    echo "Optimized Lua Bundler with Deduplication"
    echo ""
    echo "Usage: $0 --entrypoint <file> --output <file> [--workdir <dir>]"
    echo ""
    echo "Options:"
    echo "  --entrypoint <file>   Entry point Lua file to bundle"
    echo "  --output <file>       Output bundled file path"
    echo "  --workdir <dir>       Working directory for module resolution"
    echo "  --help               Show this help message"
}

# Parse arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --entrypoint) ENTRY_POINT="$2"; shift 2 ;;
        --output) OUTPUT_FILE="$2"; shift 2 ;;
        --workdir) WORKING_DIR="$2"; shift 2 ;;
        --help) show_help; exit 0 ;;
        *) echo "Unknown option: $1"; show_help; exit 1 ;;
    esac
done

# Validate required arguments
if [[ -z "$ENTRY_POINT" || -z "$OUTPUT_FILE" ]]; then
    echo -e "${RED}Error: --entrypoint and --output are required${NC}"
    show_help
    exit 1
fi

# Set working directory
if [[ -z "$WORKING_DIR" ]]; then
    WORKING_DIR=$(dirname "$ENTRY_POINT")
fi

echo -e "${GREEN}üî® Optimized Bundling${NC}"
echo "Entry point: $ENTRY_POINT"
echo "Output file: $OUTPUT_FILE"
echo "Working dir: $WORKING_DIR"

# Create output directory
mkdir -p "$(dirname "$OUTPUT_FILE")"

# Function to resolve module path
resolve_module_path() {
    local module_name="$1"
    local base_dir="$2"
    local file_path=$(echo "$module_name" | sed 's/\./\//g')
    local full_path="$base_dir/$file_path.lua"
    
    if [[ -f "$full_path" ]]; then
        echo "$full_path"
        return 0
    fi
    return 1
}

# Check if module already processed
is_module_processed() {
    local module="$1"
    for processed in "${PROCESSED_MODULES[@]}"; do
        if [[ "$processed" == "$module" ]]; then
            return 0
        fi
    done
    return 1
}

# Collect all required modules (dependency resolution)
collect_modules() {
    local file_path="$1"
    local indent="$2"
    
    if [[ ! -f "$file_path" ]]; then
        echo -e "${RED}${indent}‚ùå File not found: $file_path${NC}"
        return 1
    fi
    
    echo -e "${GREEN}${indent}üìÑ Scanning: $file_path${NC}"
    
    # Find all require statements
    while IFS= read -r line; do
        if [[ "$line" =~ require\([\"\'](.*)[\"\']\) ]]; then
            local module_name="${BASH_REMATCH[1]}"
            
            # Skip built-in modules
            if [[ "$module_name" == "json" ]]; then
                continue
            fi
            
            if ! is_module_processed "$module_name"; then
                echo -e "${YELLOW}${indent}  üîç Found dependency: $module_name${NC}"
                
                if module_path=$(resolve_module_path "$module_name" "$WORKING_DIR"); then
                    PROCESSED_MODULES+=("$module_name")
                    MODULE_POOL+=("$module_name:$module_path")
                    
                    # Recursively collect dependencies
                    collect_modules "$module_path" "$indent  "
                else
                    echo -e "${RED}${indent}  ‚ùå Could not resolve: $module_name${NC}"
                fi
            fi
        fi
    done < "$file_path"
}

# Generate bundled output with shared module pool
generate_bundle() {
    echo "-- Optimized Lua Bundle for AO Environment" > "$OUTPUT_FILE"
    echo "-- Generated by optimized-lua-bundler.sh" >> "$OUTPUT_FILE"
    echo "-- Entry point: $ENTRY_POINT" >> "$OUTPUT_FILE"
    echo "-- Bundle timestamp: $(date)" >> "$OUTPUT_FILE"
    echo "" >> "$OUTPUT_FILE"
    
    # Add shared module pool (each module only once)
    echo "-- ===== SHARED MODULE POOL =====" >> "$OUTPUT_FILE"
    echo "" >> "$OUTPUT_FILE"
    
    for module_entry in "${MODULE_POOL[@]}"; do
        IFS=':' read -r module_name module_path <<< "$module_entry"
        
        echo "" >> "$OUTPUT_FILE"
        echo "-- === MODULE: $module_name ===" >> "$OUTPUT_FILE"
        echo "-- Source: $module_path" >> "$OUTPUT_FILE"
        echo "" >> "$OUTPUT_FILE"
        
        # Add module content (without require statements)
        while IFS= read -r line; do
            # Skip require lines for bundled modules
            if [[ "$line" =~ require\([\"\'](.*)[\"\']\) ]]; then
                local req_module="${BASH_REMATCH[1]}"
                if [[ "$req_module" != "json" ]] && is_module_processed "$req_module"; then
                    echo "-- require('$req_module') -- bundled above" >> "$OUTPUT_FILE"
                    continue
                fi
            fi
            echo "$line" >> "$OUTPUT_FILE"
        done < "$module_path"
        
        echo "" >> "$OUTPUT_FILE"
        echo "-- === END MODULE: $module_name ===" >> "$OUTPUT_FILE"
    done
    
    echo "" >> "$OUTPUT_FILE"
    echo "-- ===== ENTRY POINT =====" >> "$OUTPUT_FILE"
    echo "" >> "$OUTPUT_FILE"
    
    # Add entry point (without require statements for bundled modules)
    while IFS= read -r line; do
        if [[ "$line" =~ require\([\"\'](.*)[\"\']\) ]]; then
            local req_module="${BASH_REMATCH[1]}"
            if [[ "$req_module" != "json" ]] && is_module_processed "$req_module"; then
                echo "-- require('$req_module') -- bundled above" >> "$OUTPUT_FILE"
                continue
            fi
        fi
        echo "$line" >> "$OUTPUT_FILE"
    done < "$ENTRY_POINT"
}

# Main bundling process
echo -e "${GREEN}üîç Phase 1: Dependency Resolution${NC}"
collect_modules "$ENTRY_POINT" ""

echo ""
echo -e "${GREEN}üìä Bundle Statistics:${NC}"
echo "  Modules found: ${#PROCESSED_MODULES[@]}"
echo "  Entry point: $ENTRY_POINT"

echo ""
echo -e "${GREEN}üî® Phase 2: Bundle Generation${NC}"
generate_bundle

if [[ -f "$OUTPUT_FILE" ]]; then
    echo -e "${GREEN}‚úÖ Optimized bundle created successfully!${NC}"
    echo -e "${GREEN}üìÑ Output: $OUTPUT_FILE${NC}"
    echo -e "${GREEN}üìä Size: $(wc -c < "$OUTPUT_FILE") bytes${NC}"
    echo -e "${GREEN}üìè Lines: $(wc -l < "$OUTPUT_FILE") lines${NC}"
    echo -e "${GREEN}üéØ Modules: ${#PROCESSED_MODULES[@]} unique (no duplicates)${NC}"
else
    echo -e "${RED}‚ùå Bundle generation failed${NC}"
    exit 1
fi
EOF

    chmod +x "scripts/optimized-lua-bundler.sh"
}

echo -e "${BLUE}üìù Creating optimized bundler...${NC}"
create_optimized_bundler

echo -e "${BLUE}üî® Rebuilding processes with deduplication...${NC}"

# Define processes to rebuild
PROCESSES=(
    "coordinator"
    "battle" 
    "pokemon"
    "economy"
    "security"
    "admin"
)

BUILD_SUCCESS=0
BUILD_FAILED=()

for process in "${PROCESSES[@]}"; do
    echo -e "${YELLOW}üîß Optimizing $process process...${NC}"
    
    if [[ -f "$AO_DIR/$process/main.lua" ]]; then
        # Use optimized bundler
        if ./scripts/optimized-lua-bundler.sh \
            --entrypoint "$AO_DIR/$process/main.lua" \
            --output "$OPTIMIZED_DIR/${process}-process.lua" \
            --workdir "$AO_DIR"; then
            
            echo -e "${GREEN}‚úÖ $process process optimized successfully${NC}"
            ((BUILD_SUCCESS++))
        else
            echo -e "${RED}‚ùå Failed to optimize $process process${NC}"
            BUILD_FAILED+=("$process")
        fi
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Entry point not found: $AO_DIR/$process/main.lua${NC}"
        BUILD_FAILED+=("$process")
    fi
    echo ""
done

# Generate optimization report
cat > "$OPTIMIZED_DIR/optimization-report.json" << EOF
{
    "optimization_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
    "method": "deduplication",
    "processes": [
$(for process in "${PROCESSES[@]}"; do
    if [[ -f "$OPTIMIZED_DIR/${process}-process.lua" ]]; then
        original_size=$(wc -c < "$BUILD_DIR/${process}-process.lua" 2>/dev/null || echo 0)
        optimized_size=$(wc -c < "$OPTIMIZED_DIR/${process}-process.lua")
        savings=$((original_size - optimized_size))
        echo "        {"
        echo "            \"name\": \"$process\","
        echo "            \"original_size\": $original_size,"
        echo "            \"optimized_size\": $optimized_size,"
        echo "            \"size_reduction\": $savings,"
        echo "            \"status\": \"optimized\""
        echo "        },"
    else
        echo "        {"
        echo "            \"name\": \"$process\","
        echo "            \"status\": \"failed\""
        echo "        },"
    fi
done | sed '$s/,$//')
    ],
    "total_processes": ${#PROCESSES[@]},
    "successful_optimizations": $BUILD_SUCCESS,
    "failed_optimizations": ${#BUILD_FAILED[@]}
}
EOF

echo ""
echo -e "${GREEN}üéâ Bundle Optimization Complete!${NC}"
echo "===================================="
echo -e "${GREEN}‚úÖ Successful optimizations: $BUILD_SUCCESS/${#PROCESSES[@]}${NC}"

if [[ ${#BUILD_FAILED[@]} -gt 0 ]]; then
    echo -e "${RED}‚ùå Failed optimizations: ${#BUILD_FAILED[@]}${NC}"
    echo -e "${RED}   Failed processes: ${BUILD_FAILED[*]}${NC}"
fi

echo ""
echo -e "${BLUE}üìÅ Optimized bundles:${NC}"
for process in "${PROCESSES[@]}"; do
    if [[ -f "$OPTIMIZED_DIR/${process}-process.lua" ]]; then
        original_size=$(wc -c < "$BUILD_DIR/${process}-process.lua" 2>/dev/null || echo 0)
        optimized_size=$(wc -c < "$OPTIMIZED_DIR/${process}-process.lua")
        if [[ $original_size -gt 0 ]]; then
            savings=$((original_size - optimized_size))
            percent=$((savings * 100 / original_size))
            echo -e "${GREEN}   ‚úÖ ${process}-process.lua: $optimized_size bytes (-$savings bytes, -$percent%)${NC}"
        else
            echo -e "${GREEN}   ‚úÖ ${process}-process.lua: $optimized_size bytes${NC}"
        fi
    else
        echo -e "${RED}   ‚ùå ${process}-process.lua: failed${NC}"
    fi
done

echo ""
echo -e "${BLUE}üìã Next steps:${NC}"
echo "1. Review optimized bundles in: $OPTIMIZED_DIR/"
echo "2. Run: ./scripts/validate-bundle-sizes.sh"
echo "3. Deploy optimized bundles: ./scripts/deploy-optimized-processes.sh"